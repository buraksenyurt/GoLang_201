// Code generated by MockGen. DO NOT EDIT.
// Source: weather (interfaces)

package weather

import (
    gomock "github.com/golang/mock/gomock"
    reflect "reflect"
)

// MockWeatherService is a mock of WeatherService interface
type MockWeatherService struct {
    ctrl     *gomock.Controller
    recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService
type MockWeatherServiceMockRecorder struct {
    mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
    mock := &MockWeatherService{ctrl: ctrl}
    mock.recorder = &MockWeatherServiceMockRecorder{mock}
    return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
    return m.recorder
}

// GetWeather mocks base method
func (m *MockWeatherService) GetWeather(city string) (string, error) {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "GetWeather", city)
    ret0, _ := ret[0].(string)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// GetWeather indicates an expected call of GetWeather
func (mr *MockWeatherServiceMockRecorder) GetWeather(city interface{}) *gomock.Call {
    mr.mock.ctrl.T.Helper()
    return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeather", reflect.TypeOf((*MockWeatherService)(nil).GetWeather), city)
}
